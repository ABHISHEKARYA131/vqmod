#summary Examples of use
#labels Featured
#sidebar TableOfContents


= 'Replace' Example =

  # Create a new text file and call it "replace-demo.xml"
  # Add the minimum required xml structure

*Input*
{{{
$var = 'ABC';
}}}

*Script*
{{{
<modification>
	<id>Replace ABC with 123</id>
	<version>1.0</version>
	<vqmver>1.0.8</vqmver>
	<author>xxx</author>
	<file name="path/to/myfile.php">
		<operation>
			<search position="replace"><![CDATA[
			$var = 'ABC';
			]]></search>
			<add><![CDATA[
			$var = '123';
			]]></add>
		</operation>
	</file>
</modification>
}}}

*Output*
{{{
$var = '123';
}}}



= 'Before' Example =

  # Create a new text file and call it "before-demo.xml"
  # Add the minimum required xml structure

*Input*
{{{
$var = 'ABC';
}}}

*Script*
{{{
<modification>
	<id>Before ABC, add 123</id>
	<version>1.0</version>
	<vqmver>1.0.8</vqmver>
	<author>xxx</author>
	<file name="path/to/myfile.php">
		<operation>
			<search position="before"><![CDATA[
			$var = 'ABC';
			]]></search>
			<add><![CDATA[
			$var = '123';
			]]></add>
		</operation>
	</file>
</modification>
}}}

*Output*
{{{
$var = '123';
$var = 'ABC';
}}}



= 'After' Example =

  # Create a new text file and call it "after-demo.xml"
  # Add the minimum required xml structure

*Input*
{{{
$var = 'ABC';
}}}

*Script*
{{{
<modification>
	<id>After ABC, add 123</id>
	<version>1.0</version>
	<vqmver>1.0.8</vqmver>
	<author>xxx</author>
	<file name="path/to/myfile.php">
		<operation>
			<search position="after"><![CDATA[
			$var = 'ABC';
			]]></search>
			<add><![CDATA[
			$var = '123';
			]]></add>
		</operation>
	</file>
</modification>
}}}

*Output*
{{{
$var = 'ABC';
$var = '123';
}}}



= 'Multi-line Replace' Example =

  # Create a new text file and call it "multi-replace-demo.xml"
  # Add the minimum required xml structure
  # To replace multiple lines we use the "offset" attribute with replace. Count the number of total lines to replace and subtract one as the main line is already covered by the replace command. In this example, there are 8 lines of code, so offset would be 7.

*Input*
{{{
public function index() {
	$a = rand();
	$b = rand();
	if ($a == $b) {
		echo 'oh noes';
	}
}
}}}

*Script*
{{{
<modification>
	<id>Replace many lines with one</id>
	<version>1.0</version>
	<vqmver>1.0.8</vqmver>
	<author>xxx</author>
	<file name="path/to/myfile.php">
		<operation>
			<search position="replace" offset="7"><![CDATA[
			public function index() {
			]]></search>
			<add><![CDATA[
			public function index($arr = array()) {
				foreach ($arr as $a) {
					echo $a;
    				}
			}
			]]></add>
		</operation>
	</file>
</modification>
}}}

*Output*
{{{
public function index($arr = array()) {
	foreach ($arr as $a) {
		echo $a;
    	}
}







}}}
_Note there are still 7 blank lines. The offset clears the extra 7 lines of code from the input, but the replaced code is added in place of the initial line. So there will be 7 extra spaces after the new code, but it will not affect the code functionality, only the look of the vqcache file which is of no importance._